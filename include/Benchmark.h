//
// Created by Wladyslaw Nowak on 15.04.2021.
//

#ifndef SDIZO1_BENCHMARK_H
#define SDIZO1_BENCHMARK_H


#include "BST.h"
#include "DoublyLinkedList.h"
#include "DynamicArray.h"
#include "Heap.h"
#include "RBTree.h"
#include "StructureType.h"
#include <windows.h>
#include <functional>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <random>


/**
 * Benchmark given data structure and write output to stdout and csv file.
 */
class Benchmark {
private:
    /**
     * Data structure type to be benchmarked.
     */
    StructureType type;

    /**
     * Class-specific performance counter.
     */
    LARGE_INTEGER* performanceCounter;

    mt19937 randNumGen;

    uniform_int_distribution<int> numberDistribution;

    /**
     * Amount of times the tests should be run - then the values are averaged.
     */
    int testNumber;

    /**
     * Initial size to start tests from.
     */
    int initialSize;

    /**
     * Step to increment size by every iteration.
     */
    int step;

    /**
     * Multiplier to multiply size by every iteration.
     */
    float multiplier;

    /**
     * Max size to be reached.
     */
     int maxSize;

     /**
      * Expected iteration number.
      */
     int iterationNumber{};

    /**
     * Perform Red Black Tree benchmark.
     * This method is called automatically by the constructor.
     */
    void testBST();
    /**
     * Perform Red Black Tree benchmark.
     * This method is called automatically by the constructor.
     */
    void testDoublyLinkedList();
    /**
     * Perform Red Black Tree benchmark.
     * This method is called automatically by the constructor.
     */
    void testDynamicArray();
    /**
     * Perform Red Black Tree benchmark.
     * This method is called automatically by the constructor.
     */
    void testHeap();

    /**
     * Perform Red Black Tree benchmark.
     * This method is called automatically by the constructor.
     */
    void testRBTree();

    /**
     * Function that fills given array with random data in range specified by given distribution.
     * @param dataSet Array to be filled.
     * @param size Size of this array.
     * @param dist Distribution to take data from.
     */
    void generatePopulation(int* dataSet, int size, uniform_int_distribution<int> dist);

    /**
     * Should produce output to csv file.
     */
    bool isWriteToFile;

    /**
     * Start counting time.
     */
    void startTimer();

    /**
     * Stop counting time and return it in us (micro-seconds).
     * @return Time passed since last startTimer call.
     */
    double stopTimer();

    /**
     * Calculate amount of required iterations to meet input requirements.
     * This function initializes iterationNumber.
     */
    void calcIterationNumber();

    /**
     * Function that prepares data and sends it to CSVWriter.
     * @param testName This is name of file to be generated (suffix .csv will be appended).
     * @param data Array containing time results to be written.
     * @param size Array containing corresponding sizes of data structures.
     */
    void writeToFile(string testName, double *data, int *size) const;

    /**
     * Get next random int number generated by given distribution.
     * @param dist Distribution to be used.
     * @return Random value.
     */
    int getNextRandom(uniform_int_distribution<int>& dist);

    uniform_int_distribution<int> getRandomInRange(int a, int b);

public:
    /**
     * Begin benchmarking. Perform all selected tests depending on specified data structure type.
     * @param type Which data structure should be tested.
     * @param writeToFile Should benchmark produce output to csv file.
     * @param initialSize Starting size of this structure.
     * @param step Value to increase the size every iteration.
     * @param multiplier Value to multiply the size every iteration.
     * @param testNumber Amount of repetitions on every size iterations.
     * @param maxSize Max size to be reached.
     */
    explicit Benchmark(StructureType type, bool writeToFile,
                       int initialSize, int step, float multiplier, int testNumber, int maxSize);

};


#endif //SDIZO1_BENCHMARK_H
